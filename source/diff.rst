Diff-based syncing
==================

There are many tools for comparing tabular data, but no particular
standard format for expressing those comparisons.  That makes data
synchronization difficult across organizational boundaries.  For
example, a user of downloaded data cannot easily pass
corrections/improvements to the original "upstream" source in a form
that source can quickly apply.  So it is worth examining whether
useful standard formats could be developed, and perhaps even looking
at how far we can get towards replicating the standard revision
control toolchain used for text.  The goal is to facilitate
collaborative data collection; this section is not
relevant to the presentation or use of data in read-only contexts.


SQL scripts as a diff format
----------------------------

SQL can be used to describe the changes that should be made to one
database to make it match another.  For changes to rows in a table,
a series of ``INSERT``, ``UPDATE``, and ``DELETE`` statements can be used.
An example (from `Coopy ssdiff <http://share.find.coop/doc/tutorial_diff.html>`_)::

 INSERT INTO bridges (bridge, designer, length) VALUES ('Manhattan', 'G. Lindenthal', '1470');
 UPDATE bridges SET designer='L. L. Buck' WHERE bridge='Williamsburg' AND designer='D. Duck' AND length='1600';
 DELETE FROM bridges WHERE bridge='Spamspan' AND designer='S. Spamington' AND length='10000';

For changes to the structure of a table, ``ALTER TABLE`` statements 
can be used.

The familiarity of SQL to database users is an argument in its favor.
A downside is that there are many different dialects of SQL with
different quoting rules and syntactic details.  Another downside is
its unfamiliarity to spreadsheet users.  SQL scripts are also
difficult to scan visually to see what has changed, a key requirement
for patching.

TDIFF diff format
-----------------

TDIFF is a tabular diff format developed by Joe Panico of `diffkit <http://www.diffkit.org>`_
and Paul Fitzpatrick of `Coopy <http://share.find.coop>`_.  It was intended
to nail down a format for expressing differences in tables that is 
less verbose than SQL, and appropriate for both ordered and unordered rows.

* `TDIFF specification version 0.3 <http://share.find.coop/doc/patch_format_tdiff.html>`_.
* `TDIFF specification version 0.2 <http://share.find.coop/doc/tdiff_spec_draft.html>`_.

Here's an example of a tabular diff in TDIFF format (from `Coopy ssdiff <http://share.find.coop/doc/tutorial_diff.html>`_)::

 * |bridge=Brooklyn|
 + |bridge:->Manhattan|designer:->G. Lindenthal|length:->1470|
 = |bridge=Williamsburg|designer=D. Duck->L. L. Buck|
 - |bridge=Spamspan|

Insertion, deletion, and updates are represented more tersely,
but are otherwise as for SQL.
Unlike SQL, it is possible to add "context" rows,
analogous to context lines in regular diffs.  
And for systematic changes to many rows,
repeated column names may be factored out, again
in the interests of terseness and to ease review::

 @ |bridge=|length=|visited|
 = |Queensborough|1182|*->yes|
 = |Triborough|1380,383|*->no|
 = |Bronx Whitestone|2300|*->yes|
 = |Throgs Neck|1800|*->yes|
 = |George Washington|3500|*->no|

Schema differences can also be represented.

TDIFF format diffs may be easier to review than SQL scripts, but a big
downside is that it is a new format, unfamiliar to database and
spreadsheet folks alike.  
It can currently 
only be generated by Coopy's `ssdiff <http://share.find.coop/doc/ssdiff.html>`_ program.
Also, as a new format, tools that process it will need a
special-purpose parser.
There is a variant of TDIFF that is expressed
as a CSV file, so that it can be read more easily
(the `CSV DTBL diff format <http://share.find.coop/doc/patch_format_csv.html>`_).  


Highlighter diff format
-----------------------

.. role:: ins
.. role:: del
.. role:: update
.. role:: header

.. raw:: html

 <style> 
   .highlighter .ins { color:green; } 
   .highlighter .del { color:red; } 
   .highlighter .update { color: blue; } 
   .highlighter .header { font-weight: bold; } 
 </style>

The highlighter diff format is a simple format for expressing
the difference between two tables that is
itself tabular.  It takes a "reference" table
and decorates it to highlight differences with another table
(see `highlighter diff specification <http://share.find.coop/doc/spec_hilite.html>`_).
It has the advantage of being much more legible and easy to review
than other formats.  Here's an example:

.. csv-table::
 :class: highlighter

 :header:`@@`,:header:`bridge`,:header:`designer`,:header:`length`
 ,Brooklyn,"J. A. Roebling",1595
 :ins:`+++`,:ins:`Manhattan`,:ins:`G. Lindenthal`,:ins:`1470`
 :update:`->`,Williamsburg,:update:`D. Duck->L. L. Buck`,1600
 ,Queensborough,"Palmer & Hornbostel",1182
 ,Triborough,"O. H. Ammann","1380,383"
 ...,...,...,...
 ,"Throgs Neck","O. H. Ammann",1800
 ,"George Washington","O. H. Ammann",3500
 :del:`---`,:del:`Spamspan`,:del:`S. Spamington`,:del:`10000`

The diff is just the original table, with decoration:

* An "action" column is added that tags rows that have been
  inserted, deleted, or updated (relative to the original).
* The values in updated cells are replaced with an "X->Y"
  string showing the original and modified value. The "->"
  separator is replaced with longer variants such as "--->" 
  as needed to avoid collision with data.
* When the diff is saved in a format that allows color,
  visual highlighting is applied (green for insertions, red for
  deletions, etc).

For data where row order is meaningful, some number of rows
surrounding modified rows are shown (like the context lines in textual
diffs).  Unchanged rows are omitted with a row of "..." values.

A major advantage of highlighter diffs is their legibility.
A downside of highlighter diffs is that they are not a standard,
being supported only by Coopy.  However, they can be viewed
and edited in existing tools (Excel, gnumeric, etc) and
the bar for parsing such
diffs is not large (see e.g. `javascript sample code <https://github.com/paulfitz/coopy/blob/e73bb509043092689680acc4743214cfba510d42/src/light/js/coopy.js#L80>`_).
In a pinch, highlighter diffs can be converted to SQL with Coopy's 
`ssrediff <http://share.find.coop/doc/ssrediff.html#ssrediff_examples>`_::

 INSERT INTO sheet (bridge, designer, length) VALUES ('Manhattan', 'G. Lindenthal', '1470');
 UPDATE sheet SET designer='L. L. Buck' WHERE bridge='Williamsburg' AND designer='D. Duck' AND length='1600';
 DELETE FROM sheet WHERE bridge='Spamspan' AND designer='S. Spamington' AND length='10000';

Patching
--------

With patching, we take a comparison between a reference table
and another version of that table, and apply the changes noted
in that comparison to a third table.  If the third table is 
exactly the reference table, then the changes should go through 
exactly.  If the third table is a modified version of the reference,
then as many of the changes should be made as possible, subject to
conflicts or ambiguities that may arise.

SQL script diffs can be used directly on databases without any special
tool needed, if the SQL dialect is compatible.  Some instrumentation
is generally needed to use them on spreadsheets.

TDIFF and highlighter diffs can currently only be used as patches via
Coopy's `sspatch <http://share.find.coop/doc/sspatch.html>`_ program,
or using the Coopy client library (currently language support: C++,
Python, Ruby).  There is an `online diffing/patching service
<http://share.find.coop>`_ using the highlighter diff (but again, from
the Coopy folks).  Implementing plugins in common spreadsheet programs
for using highlighter diff would be low-hanging fruit in boosting use
of this format.

Patching tabular data turns out to be much more pleasant than 
the common alternative: format conversions.  Format conversions
are very destructive of meta-data; patches don't touch it.

Merging
-------

When all three tables involved in a diff-patch operation are available
simultaneously (the two tables diffed, and the table being patched),
it is possible to combine the operations in a 3-way merge.  This
operation merges the changes made in two tables relative to a common
ancestor (rather than to each other).  It is the fundamental operation
needed for revision control tools like svn and git.

Coopy's `ssmerge <http://share.find.coop/doc/ssmerge.html>`_ program
implements 3-way merges (Coopy's ssdiff and sspatch programs are in fact
specializations of the functionality in ssmerge).

Merging is simplest for data that has a well defined primary key.
In distributed data collection projects, there may well be no
central authority to coin primary keys (if there is no natural key).
The ssmerge program does the best it can by searching for "fuzzy"
keys in the data.  An improvement would be to implement a 
distributed procedure for coining and propagating unique
identifiers at merge time.

Distributed revision control
----------------------------

Once 3-way merges are available, distributed revision control is possible.
For example, see `using Coopy with git <http://share.find.coop/doc/tutorial_git.html>`_ for how to configure git to use ssmerge.  A modified version of 
the `fossil SCM <http://fossil-scm.org/>`_ configured to use ssmerge is also
distributed with Coopy (`example of use <http://share.find.coop/wiki/timeline>`_).

